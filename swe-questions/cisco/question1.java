/*
This is the question I got asked for cisco swe intern 1 for summer 2025 round 1 and technically final round, this was the first question

This is the exact question from leetcode as we the exact same but expect the interviewer asked to return 1 instead of true and 0 for false

#844 

Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.

Note that after backspacing an empty text, the text will continue empty.

 

Example 1:

Input: s = "ab#c", t = "ad#c"
Output: true
Explanation: Both s and t become "ac".
Example 2:

Input: s = "ab##", t = "c#d#"
Output: true
Explanation: Both s and t become "".
Example 3:

Input: s = "a#c", t = "b"
Output: false
Explanation: s becomes "c" while t becomes "b".
 

Constraints:

1 <= s.length, t.length <= 200
s and t only contain lowercase letters and '#' characters.

Now the thought process to answer this was:

I create two stacks, one for each word

for each string, we iterate and see if the character is a backspace, '#', to remove from the word, but we must ensure the stack isn't empty as popping from empty stack throws an error

If not a backspace we add to stack

We do for both stacks and check if the stacks are equal using a built in function

We return 1 if they are equal else 0 if not

Time complexity is O(n) and space complexity is O(n)

For omptimal space complexity of O(1), we use pointers
 */

 import java.util.Stack;

 class question1 {
    public Integer backspaceCompare(String s, String t) {
        Stack<Character> stack1 = new Stack<>(), stack2 = new Stack<>();

        for (char c : s.toCharArray()){
            if(!stack1.isEmpty() && c == '#') stack1.pop();
            else if(c != '#') stack1.push(c);
        }
        
        for (char c : t.toCharArray()){
            if(!stack2.isEmpty() && c == '#') stack2.pop();
            else if(c != '#') stack2.push(c);
        }

        return stack1.equals(stack2) ? 1 : 0;
    }

    public static void main(String[] args) {
        question1 q = new question1();

        // test cases generated by chatgpt
        System.out.println(q.backspaceCompare("ab#c", "ad#c")); // 1 → both become "ac"
        System.out.println(q.backspaceCompare("ab##", "c#d#")); // 1 → both become ""
        System.out.println(q.backspaceCompare("a#c", "b"));     // 1 → "c" vs "b"
        System.out.println(q.backspaceCompare("a##c", "#a#c")); // 1 → both become "c"
        System.out.println(q.backspaceCompare("a#b#c#", ""));   // 1 → all deleted
        System.out.println(q.backspaceCompare("", ""));         // 1 → both empty
        System.out.println(q.backspaceCompare("abc#d", "acc#c")); // 0 → "abd" vs "ac"
        System.out.println(q.backspaceCompare("bxj##tw", "bxo#j##tw")); // 1 → both become "tw"
        System.out.println(q.backspaceCompare("nzp#o#g", "b#nzp#o#g")); // 1
        System.out.println(q.backspaceCompare("a###", ""));     // 1 → all characters removed
    }
}